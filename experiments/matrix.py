
matrix = [
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
    ["-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
]


text = "H"

H = [
    ["X", "-", "-", "X"],
    ["X", "-", "-", "X"],
    ["X", "-", "-", "X"],
    ["X", "X", "X", "X"],
    ["X", "X", "X", "X"],
    ["X", "-", "-", "X"],
    ["X", "-", "-", "X"],
    ["X", "-", "-", "X"],
]

E = [
    ["X", "X", "X", "X"],
    ["X", "X", "X", "X"],
    ["X", "X", "-", "-"],
    ["X", "X", "X", "X"],
    ["X", "X", "X", "X"],
    ["X", "X", "-", "_"],
    ["X", "X", "X", "X"],
    ["X", "X", "X", "X"], 
]

L = [
    ["X", "X", "-", "-"],
    ["X", "X", "-", "-"],
    ["X", "X", "-", "-"],
    ["X", "X", "-", "-"],
    ["X", "X", "-", "-"],
    ["X", "X", "-", "-"],
    ["X", "X", "X", "X"],
    ["X", "X", "X", "X"],
]


O = [
    ["-", "X", "X", "-"],
    ["X", "X", "X", "X"],
    ["X", "-", "-", "X"],
    ["X", "-", "_", "X"],
    ["X", "_", "_", "X"],
    ["X", "-", "-", "X"],
    ["X", "X", "X", "X"],
    ["-", "X", "X", "-"],
]

def pp(m, title):
    print(title)
    for row in m:
        for col in row:
            print(col, end='')
        print()

def merge(matrix_a, matrix_b, offset=1):
    # offset += 1

    for i, row in enumerate(matrix_a):
        for j, _ in enumerate(row):
            if  j >= len(matrix_b[0]):
                continue
            # print(f"{matrix_a[i][j+offset]}-{matrix_b[i][j]}|", end='')
            matrix_a[i][j+offset] = matrix_b[i][j]
        # print()
    return matrix_a


def shitf(matrix, step=1):
    for i, row in enumerate(matrix):
        matrix[i] = push_left(row, 1)
    return matrix

def push_left(matrix, step=1):
    if len(matrix) == 0:
        return matrix

    step = step % len(matrix)
    return matrix[-step:] + matrix[:-step]
            
            

            


with_h = merge(matrix, H)
with_he = merge(with_h, E, offset=len(H[0])+2)


with_hel = merge(with_h, L, offset=len(E[0])*3)
with_hell = merge(with_h, L, offset=len(L[0])*4+2)
with_hello = merge(with_h, O, offset=len(L[0])*6)

# pp(with_hello, "Hello!")

import time, sys
FRAMES = 32


grid = with_hello
for frame in range(FRAMES):
    grid = shitf(grid)
    for row in grid:
        for col in row:
            print(col, end='')
        print()
    time.sleep(1)





